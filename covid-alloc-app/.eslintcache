[{"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/index.js":"1","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/App.js":"2","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/reportWebVitals.js":"3","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/components/MainForm.js":"4"},{"size":548,"mtime":1607875654529,"results":"5","hashOfConfig":"6"},{"size":774,"mtime":1607955495898,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1607762267801,"results":"8","hashOfConfig":"6"},{"size":2452,"mtime":1607955572491,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1cd67v2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/index.js",[],["20","21"],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/App.js",[],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/reportWebVitals.js",[],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/components/MainForm.js",["22","23","24"],"import { Container, Col, Row, InputGroup, FormControl, Button} from 'react-bootstrap';\nimport React from 'react';\n\nexport default class MainForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        groups: [{ name: \"Group 1\", population: 100 }],\n        contactRates: [[]],\n        groupName:\"\",\n      };\n  \n      this.addGroup = this.addGroup.bind(this);\n    }\n  \n    handleChange(event) {\n      let fieldName = event.target.name;\n      let fieldVal = event.target.value;\n      this.setState({\n        [fieldName]:fieldVal\n      })\n    }\n  \n    handlePopulationChange(event) {\n      let groupName = event.target.name;\n      let fieldVal = event.target.value;\n    }\n  \n    addGroup() {\n      let name = this.state.groupName\n      if (name == \"\") return\n      this.setState(prevState => ({\n        groupName:\"\",\n        groups: [...prevState.groups, {\n          name,\n          population: 200\n        }]\n      }))\n    }\n  \n    render() {\n      return (\n        <div class='wrapper'>\n          <Container>\n            <Row>\n              <Col sm={4}>\n                <h2>Groups</h2>\n                <InputGroup className=\"mb-3\">\n                  <FormControl\n                  name='groupName' \n                    placeholder=\"Group Name\"\n                    value={this.state.groupName}\n                    onChange={this.handleChange.bind(this)}\n                  />\n                  <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={this.addGroup}>Add</Button>\n                  </InputGroup.Append>\n                </InputGroup>\n  \n                {this.state.groups.map((group) =>\n                  <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"basic-addon1\">{group.name}</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    name={group.name}\n                    value={group.population}\n                    aria-label=\"Username\"\n                    aria-describedby=\"basic-addon1\"\n                    onChange={this.handlePopulationChange.bind(this)}\n                  />\n                </InputGroup>\n                )}\n  \n                \n  \n  \n              </Col>\n  \n  \n  \n  \n              <Col sm={8}>\n                <h2>Contact Rates</h2>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      );\n    }\n  }",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":24,"column":11,"nodeType":"31","messageId":"32","endLine":24,"endColumn":20},{"ruleId":"29","severity":1,"message":"33","line":25,"column":11,"nodeType":"31","messageId":"32","endLine":25,"endColumn":19},{"ruleId":"34","severity":1,"message":"35","line":30,"column":16,"nodeType":"36","messageId":"37","endLine":30,"endColumn":18},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'groupName' is assigned a value but never used.","Identifier","unusedVar","'fieldVal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]