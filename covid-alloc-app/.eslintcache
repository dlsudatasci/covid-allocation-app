[{"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/index.js":"1","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/reportWebVitals.js":"2","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/App.js":"3","/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/components/MainForm.js":"4"},{"size":500,"mtime":1608099464609,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1607956011759,"results":"7","hashOfConfig":"6"},{"size":1651,"mtime":1610982194101,"results":"8","hashOfConfig":"6"},{"size":13626,"mtime":1612711397269,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1cd67v2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/index.js",[],["20","21"],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/reportWebVitals.js",[],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/App.js",[],"/Users/ianona/Desktop/covid-allocation-app/covid-alloc-app/src/components/MainForm.js",["22"],"import Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport ReactDataSheet from 'react-datasheet';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport axios from \"axios\"\nimport React from 'react';\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  group: {\n    marginTop: 10\n  },\n  buttonMargin: {\n    marginTop: 10,\n  },\n}));\n\nclass MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      groups: [],\n      groupName: \"\",\n      grid: [\n        // [{value: 0}]\n      ],\n      ve: 0.50,\n      results: null,\n      model: 'minV',\n      vaccineName: \"\",\n      vaccines: [],\n    };\n\n    this.addGroup = this.addGroup.bind(this);\n    this.addVaccine = this.addVaccine.bind(this);\n  }\n\n  // handling change for text box values (Group, vaccine efficacy)\n  handleChange(event) {\n    let fieldName = event.target.name;\n    let fieldVal = event.target.value;\n    this.setState({\n      [fieldName]: fieldVal\n    })\n  }\n\n  // handling change for population size values\n  handlePopulationChange(event) {\n    let groupName = event.target.name;\n    let fieldVal = event.target.value;\n    let grpsClone = JSON.parse(JSON.stringify(this.state)).groups\n    let index = -1\n    grpsClone.find(function (item, i) {\n      if (item.name === groupName) {\n        index = i\n        return i\n      }\n      return 0\n    });\n\n    grpsClone[index].population = fieldVal\n\n    this.setState({\n      groups: grpsClone\n    })\n  }\n\n  // helper function for contact grid\n  addToPrev(prevGrid, newVal) {\n    prevGrid.forEach(row => {\n      while (row.length !== newVal) {\n        row.push({ value: 0 })\n      }\n    })\n    return prevGrid\n  }\n\n  // adding new population group, updating state for groups array and contact grid\n  addGroup() {\n    let name = this.state.groupName\n    if (name === \"\") return\n    this.setState(prevState => ({\n      groupName: \"\",\n      groups: [...prevState.groups, {\n        name,\n        population: 200\n      }],\n      grid: [\n        ...this.addToPrev(prevState.grid, prevState.groups.length + 1),\n        Array.apply(null, Array(prevState.groups.length + 1)).map(function () { return { value: 0 } })\n      ]\n    }))\n\n    console.log(this.state.grid)\n  }\n\n  // for removing population groups\n  removeGroup = name => () => {\n    console.log(name)\n    let groupName = name;\n    let grpsClone = JSON.parse(JSON.stringify(this.state)).groups\n    let index = -1\n    grpsClone.find(function (item, i) {\n      if (item.name === groupName) {\n        index = i\n        return i\n      }\n      return 0\n    });\n    grpsClone.splice(index, 1);\n    this.setState(prevState => ({\n      groups: grpsClone,\n      grid: [\n        ...this.removeFromPrev(prevState.grid, prevState.groups.length - 1),\n      ]\n    }))\n  }\n\n  // helper function for contact grid\n  removeFromPrev(prevGrid, newVal) {\n    while (prevGrid.length !== newVal) {\n      prevGrid.pop()\n    }\n\n    prevGrid.forEach(row => {\n      while (row.length !== newVal) {\n        row.pop()\n      }\n    })\n    return prevGrid\n  }\n\n\n  // for allocate button\n  allocate() {\n    console.log(this.state)\n    if (this.state.model === 'minR') {\n      alert(\"No model set up for minR yet\")\n      return\n    }\n\n    // build API URL\n    let apiURL = \"http://34.123.195.162:5000/solve?groups=[\"\n\n    this.state.groups.forEach((group, index) => {\n      apiURL += \"%22\" + group.name + \"%22\"\n      if (index !== this.state.groups.length - 1) {\n        // apiURL += \",\"\n        apiURL += \"%2C\"\n      }\n    });\n\n    apiURL += \"]&N0=[\";\n\n    this.state.groups.forEach((group, index) => {\n      apiURL += group.population\n      if (index !== this.state.groups.length - 1) {\n        // apiURL += \",\"\n        apiURL += \"%2C\"\n      }\n    });\n\n    apiURL += \"]&fn0=[0.5%2C0.5]&Kmatval=[\";\n    this.state.grid.forEach((row, ri) => {\n      // console.log(row)\n      row.forEach((cell, ci) => {\n        apiURL += cell.value\n        if (ri !== this.state.grid.length - 1 || ci !== row.length - 1) {\n          // apiURL += \",\"\n          apiURL += \"%2C\"\n        }\n      })\n    });\n\n    apiURL += \"]&H=\" + this.state.ve;\n    let sample = \"http://34.123.195.162:5000/solve?groups=[%22A%22%2C%22B%22]&N0=[200%2C200]&fn0=[0.5%2C0.5]&Kmatval=[1.0%2C0.9%2C0.8%2C0.9]&H=0.98\"\n    console.log(sample)\n    console.log(apiURL)\n    axios\n      .get(apiURL)\n      .then((response) => {\n        // console.log(response)\n        // this.setState({\n        //   results: response.data\n        // })\n        alert(response.data.result[1])\n        console.log(response.data.result)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter' && event.target.name==='groupName') {\n      this.addGroup()\n    }\n    if (event.key === 'Enter' && this.state.model === 'minR') {\n      this.addVaccine()\n    }\n  }\n\n  handleModelChange = (event) => {\n    this.setState({\n      model: event.target.value\n    })\n  }\n\n  // adding new vaccine, updating state for vaccines array\n  addVaccine() {\n    let name = this.state.vaccineName\n    if (name === \"\") return\n    this.setState(prevState => ({\n      vaccineName: \"\",\n      vaccines: [...prevState.vaccines, {\n        name,\n        effectivity: 0.50\n      }],\n    }))\n  }\n\n  // for removing population groups\n  removeVaccine = name => () => {\n    let vName = name;\n    let vacsClone = JSON.parse(JSON.stringify(this.state)).vaccines\n    let index = -1\n    vacsClone.find(function (item, i) {\n      if (item.name === vName) {\n        index = i\n        return i\n      }\n      return 0\n    });\n    vacsClone.splice(index, 1);\n    this.setState(prevState => ({\n      vaccines: vacsClone,\n    }))\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className='wrapper'>\n        <Container>\n          <h1>COVID Vaccine Allocation Model</h1>\n          <FormControl component=\"fieldset\">\n            {/* <FormLabel component=\"legend\">Model</FormLabel> */}\n            <RadioGroup row>\n              <FormControlLabel\n                control={<Radio color=\"primary\" />}\n                checked={this.state.model === 'minV'}\n                onChange={this.handleModelChange}\n                value=\"minV\"\n                label=\"minV\"\n              />\n              <FormControlLabel\n                control={<Radio color=\"primary\" />}\n                checked={this.state.model === 'minR'}\n                onChange={this.handleModelChange}\n                value=\"minR\"\n                label=\"minR\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Container>\n        <Container>\n          <Grid container spacing={1}>\n            {/* Left Column */}\n            <Grid item xs={4}>\n              {/* Population Group text input */}\n              <h2>Population Groups</h2>\n              {/* <form noValidate autoComplete=\"off\"> */}\n              <TextField\n                fullWidth\n                label=\"Group Name\"\n                name='groupName'\n                value={this.state.groupName}\n                onChange={this.handleChange.bind(this)}\n                variant=\"outlined\"\n                onKeyPress={this.handleKeyPress}\n                InputProps={{ endAdornment: <Button onClick={this.addGroup}>Add</Button> }}\n              />\n              {/* </form> */}\n\n              {/* Population size input for every group */}\n              {this.state.groups.map((group) =>\n                <Box mt={2} key={group.name}>\n                  <TextField\n                    fullWidth\n                    // label={group.name}\n                    value={group.population}\n                    onChange={this.handlePopulationChange.bind(this)}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">{group.name}:</InputAdornment>,\n                      endAdornment: <Icon onClick={this.removeGroup(group.name)} className={classes.closeBtn}>close</Icon>\n                    }}\n                    name={group.name}\n                  />\n                </Box>\n              )}\n\n              {this.state.model === 'minV' &&\n                <div>\n                  <h2>Vaccine Efficacy</h2>\n                  {/* Vaccine efficacy input */}\n                  <Box mt={2}>\n                    <TextField fullWidth required id=\"standard-required\" label=\"Vaccine Efficiency\" value={this.state.ve}\n                      onChange={this.handleChange.bind(this)} name='ve'\n                    />\n                  </Box>\n                </div>\n              }\n\n              {this.state.model === 'minR' &&\n                <div>\n                  <h2>Vaccine Types</h2>\n                  {/* <form noValidate autoComplete=\"off\"> */}\n                  <TextField\n                    fullWidth\n                    label=\"Vaccine Name\"\n                    name='vaccineName'\n                    value={this.state.vaccineName}\n                    onChange={this.handleChange.bind(this)}\n                    variant=\"outlined\"\n                    onKeyPress={this.handleKeyPress}\n                    InputProps={{ endAdornment: <Button onClick={this.addVaccine}>Add</Button> }}\n                  />\n                  {/* </form> */}\n\n                  {/* Population size input for every group */}\n                  {this.state.vaccines.map((vaccine) =>\n                    <Box mt={2} key={vaccine.name}>\n                      <TextField\n                        fullWidth\n                        // label={group.name}\n                        value={vaccine.effectivity}\n                        onChange={this.handlePopulationChange.bind(this)}\n                        InputProps={{\n                          startAdornment: <InputAdornment position=\"start\">{vaccine.name}:</InputAdornment>,\n                          endAdornment: <Icon onClick={this.removeVaccine(vaccine.name)} className={classes.closeBtn}>close</Icon>\n                        }}\n                        name={vaccine.name}\n                      />\n                    </Box>\n                  )}\n                </div>\n              }\n\n\n              {\n                this.state.results && this.state.results.status === true ?\n                  <div>\n                    <h2>Results</h2>\n                    {this.state.results.result.map((result) =>\n                      <p>{result}</p>\n                    )}\n\n                  </div>\n                  :\n                  this.state.results ?\n                    <div>\n                      <h2>Error!</h2>\n                      <p>{this.state.results.errors}</p>\n                    </div>\n                    :\n                    <div></div>\n\n              }\n\n\n            </Grid>\n\n            {/* Right Column */}\n            <Grid item xs={8}>\n              <Grid container spacing={1}>\n                <Grid item xs={6}>\n                  <h2>Contact Rates</h2>\n                </Grid>\n                {/* Allocate button */}\n                <Grid item xs={6}>\n                  <Box mt={2}>\n                    <Button onClick={this.allocate.bind(this)} className={classes.buttonMargin} variant=\"contained\" color=\"primary\">\n                      Allocate\n                    </Button>\n                  </Box>\n                </Grid>\n              </Grid>\n\n              {/* Contact rates data sheet */}\n              <ReactDataSheet\n                data={this.state.grid}\n                valueRenderer={cell => cell.value}\n                sheetRenderer={props => (\n                  <table className={props.className + ' my-awesome-extra-class'}>\n                    <thead>\n                      <tr>\n                        <th className='action-cell' />\n                        {this.state.groups.map((group) => (<th key={group.name}>{group.name}</th>))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props.children}\n                    </tbody>\n                  </table>\n                )}\n                rowRenderer={props => (\n                  <tr>\n                    <td className='read-only'>\n                      <span className=\"value-viewer\">{this.state.groups[props.row] ? this.state.groups[props.row].name : null}</span>\n                    </td>\n                    {props.children}\n\n                  </tr>\n                )}\n                onCellsChanged={changes => {\n                  const grid = this.state.grid.map(row => [...row]);\n                  changes.forEach(({ cell, row, col, value }) => {\n                    grid[row][col] = { ...grid[row][col], value };\n                  });\n                  this.setState({ grid });\n                }}\n              />\n\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nMainForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MainForm);",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":16,"column":8,"nodeType":"29","messageId":"30","endLine":16,"endColumn":17},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'FormLabel' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]